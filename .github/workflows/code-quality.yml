name: Code Quality Checks

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'flutter/**'
      - '.github/workflows/code-quality.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'flutter/**'

env:
  FLUTTER_VERSION: '3.22.0'

jobs:
  dart-code-metrics:
    name: Dart Code Metrics
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Install dependencies
        run: |
          cd flutter
          flutter pub get
          
      - name: Install Dart Code Metrics
        run: |
          cd flutter
          dart pub global activate dart_code_metrics
          
      - name: Run Dart Code Metrics
        run: |
          cd flutter
          dart_code_metrics analyze lib --reporter=json > code_metrics_report.json
          dart_code_metrics check-unused-files lib --reporter=json > unused_files_report.json
          dart_code_metrics check-unused-code lib --reporter=json > unused_code_report.json
          
      - name: Upload code metrics results
        uses: actions/upload-artifact@v3
        with:
          name: code-metrics-results
          path: |
            flutter/code_metrics_report.json
            flutter/unused_files_report.json
            flutter/unused_code_report.json

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Install dependencies
        run: |
          cd flutter
          flutter pub get
          
      - name: Check for outdated dependencies
        run: |
          cd flutter
          flutter pub outdated --json > outdated_dependencies.json
          
      - name: Dependency tree analysis
        run: |
          cd flutter
          flutter pub deps --json > dependency_tree.json
          
      - name: Check for unused dependencies
        run: |
          cd flutter
          dart pub global activate dependency_validator
          dependency_validator --ignore=dev_dependencies
          
      - name: Upload dependency analysis
        uses: actions/upload-artifact@v3
        with:
          name: dependency-analysis
          path: |
            flutter/outdated_dependencies.json
            flutter/dependency_tree.json

  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Install dependencies
        run: |
          cd flutter
          flutter pub get
          
      - name: Run tests with coverage
        run: |
          cd flutter
          flutter test --coverage
          
      - name: Install lcov
        run: sudo apt-get install -y lcov
        
      - name: Generate coverage report
        run: |
          cd flutter
          lcov --summary coverage/lcov.info
          lcov --list coverage/lcov.info
          
      - name: Check coverage threshold
        run: |
          cd flutter
          lcov --summary coverage/lcov.info | grep -E "lines\.*: [0-9]+\.[0-9]+%" | sed 's/.*: \([0-9]*\.[0-9]*\)%.*/\1/' | awk '{if ($1 < 80) exit 1}'
          
      - name: Generate HTML coverage report
        run: |
          cd flutter
          genhtml coverage/lcov.info -o coverage/html
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: flutter/coverage/html/

  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Install dependencies
        run: |
          cd flutter
          flutter pub get
          
      - name: Build app for performance analysis
        run: |
          cd flutter
          flutter build apk --debug --split-debug-info=build/debug-info
          
      - name: Analyze app size
        run: |
          cd flutter
          flutter build apk --analyze-size --target-platform android-arm64
          
      - name: Generate build report
        run: |
          cd flutter
          flutter build apk --release --analyze-size --target-platform android-arm64 > build_analysis.txt
          
      - name: Upload performance analysis
        uses: actions/upload-artifact@v3
        with:
          name: performance-analysis
          path: |
            flutter/build_analysis.txt
            flutter/build/debug-info/

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Install dependencies
        run: |
          cd flutter
          flutter pub get
          
      - name: Run security audit
        run: |
          cd flutter
          flutter pub audit --json > security_audit.json
          
      - name: Check for hardcoded secrets
        run: |
          cd flutter
          # Simple grep for common secret patterns
          grep -r -n -E "(api_key|secret|password|token).*=.*['\"][^'\"]*['\"]" lib/ || echo "No hardcoded secrets found"
          
      - name: Check for debug code
        run: |
          cd flutter
          grep -r -n -E "(print\(|debugPrint\(|console\.log)" lib/ || echo "No debug code found"
          
      - name: Upload security audit results
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-results
          path: flutter/security_audit.json

  generate-quality-report:
    name: Generate Quality Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [dart-code-metrics, dependency-analysis, test-coverage, performance-analysis, security-audit]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Generate quality report
        run: |
          cat > generate_report.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          const report = {
            timestamp: new Date().toISOString(),
            commit: process.env.GITHUB_SHA,
            branch: process.env.GITHUB_REF_NAME,
            metrics: {},
            recommendations: []
          };
          
          // Process code metrics
          try {
            const metricsPath = './code-metrics-results/code_metrics_report.json';
            if (fs.existsSync(metricsPath)) {
              const metrics = JSON.parse(fs.readFileSync(metricsPath, 'utf8'));
              report.metrics.codeMetrics = metrics;
            }
          } catch (e) {
            console.log('No code metrics found');
          }
          
          // Process dependency analysis
          try {
            const depsPath = './dependency-analysis/outdated_dependencies.json';
            if (fs.existsSync(depsPath)) {
              const deps = JSON.parse(fs.readFileSync(depsPath, 'utf8'));
              report.metrics.outdatedDependencies = deps;
            }
          } catch (e) {
            console.log('No dependency analysis found');
          }
          
          // Process security audit
          try {
            const securityPath = './security-audit-results/security_audit.json';
            if (fs.existsSync(securityPath)) {
              const security = JSON.parse(fs.readFileSync(securityPath, 'utf8'));
              report.metrics.securityAudit = security;
            }
          } catch (e) {
            console.log('No security audit found');
          }
          
          // Generate recommendations
          if (report.metrics.codeMetrics) {
            report.recommendations.push("Review code complexity metrics and refactor high-complexity functions");
          }
          
          if (report.metrics.outdatedDependencies) {
            report.recommendations.push("Update outdated dependencies to latest versions");
          }
          
          if (report.metrics.securityAudit) {
            report.recommendations.push("Address security vulnerabilities found in dependencies");
          }
          
          fs.writeFileSync('quality_report.json', JSON.stringify(report, null, 2));
          console.log('Quality report generated successfully');
          EOF
          
          node generate_report.js
          
      - name: Upload quality report
        uses: actions/upload-artifact@v3
        with:
          name: quality-report
          path: quality_report.json
          
      - name: Comment PR with quality metrics
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            let report = {};
            try {
              report = JSON.parse(fs.readFileSync('quality_report.json', 'utf8'));
            } catch (e) {
              console.log('Could not read quality report');
              return;
            }
            
            const comment = `## 📊 Code Quality Report
            
            **Commit:** ${report.commit}
            **Branch:** ${report.branch}
            **Timestamp:** ${report.timestamp}
            
            ### 📈 Metrics Summary
            - Code Metrics: ${report.metrics.codeMetrics ? '✅ Analyzed' : '❌ Not available'}
            - Dependency Analysis: ${report.metrics.outdatedDependencies ? '✅ Analyzed' : '❌ Not available'}
            - Security Audit: ${report.metrics.securityAudit ? '✅ Analyzed' : '❌ Not available'}
            
            ### 🔧 Recommendations
            ${report.recommendations.map(rec => `- ${rec}`).join('\n')}
            
            [View detailed reports in artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });