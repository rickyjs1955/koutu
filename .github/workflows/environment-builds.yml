name: Environment-Specific Builds

on:
  push:
    branches: [ main, develop, 'feature/**', 'release/**' ]
    paths:
      - 'flutter/**'
      - '.github/workflows/environment-builds.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'flutter/**'
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  FLUTTER_VERSION: '3.22.0'
  JAVA_VERSION: '17'

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
      
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/feature/* ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            echo "environment=release-candidate" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  build-android:
    name: Build Android (${{ needs.determine-environment.outputs.environment }})
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: determine-environment
    
    strategy:
      matrix:
        build-mode:
          - debug
          - profile
          - release
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Install dependencies
        run: |
          cd flutter
          flutter pub get
          
      - name: Setup environment configuration
        run: |
          cd flutter
          case "${{ needs.determine-environment.outputs.environment }}" in
            "production")
              cp lib/env/env.prod.dart lib/env/env.dart
              ;;
            "staging")
              cp lib/env/env.staging.dart lib/env/env.dart
              ;;
            "release-candidate")
              cp lib/env/env.staging.dart lib/env/env.dart
              ;;
            *)
              cp lib/env/env.dev.dart lib/env/env.dart
              ;;
          esac
          
      - name: Setup Android signing (Release only)
        if: matrix.build-mode == 'release' && needs.determine-environment.outputs.environment != 'development'
        run: |
          cd flutter/android
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > keystore.jks
          
          cat > key.properties << EOF
          storeFile=keystore.jks
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          EOF
          
      - name: Build Android APK
        run: |
          cd flutter
          
          # Set flavor based on environment
          FLAVOR=""
          case "${{ needs.determine-environment.outputs.environment }}" in
            "production")
              FLAVOR="--flavor prod"
              ;;
            "staging")
              FLAVOR="--flavor staging"
              ;;
            "release-candidate")
              FLAVOR="--flavor staging"
              ;;
            *)
              FLAVOR="--flavor dev"
              ;;
          esac
          
          flutter build apk --${{ matrix.build-mode }} $FLAVOR
          
      - name: Build Android App Bundle (Release only)
        if: matrix.build-mode == 'release'
        run: |
          cd flutter
          
          # Set flavor based on environment
          FLAVOR=""
          case "${{ needs.determine-environment.outputs.environment }}" in
            "production")
              FLAVOR="--flavor prod"
              ;;
            "staging")
              FLAVOR="--flavor staging"
              ;;
            "release-candidate")
              FLAVOR="--flavor staging"
              ;;
            *)
              FLAVOR="--flavor dev"
              ;;
          esac
          
          flutter build appbundle --${{ matrix.build-mode }} $FLAVOR
          
      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: android-apk-${{ matrix.build-mode }}-${{ needs.determine-environment.outputs.environment }}
          path: flutter/build/app/outputs/flutter-apk/*.apk
          
      - name: Upload App Bundle
        if: matrix.build-mode == 'release'
        uses: actions/upload-artifact@v3
        with:
          name: android-aab-${{ matrix.build-mode }}-${{ needs.determine-environment.outputs.environment }}
          path: flutter/build/app/outputs/bundle/*/*.aab

  build-ios:
    name: Build iOS (${{ needs.determine-environment.outputs.environment }})
    runs-on: macos-latest
    timeout-minutes: 60
    needs: determine-environment
    
    strategy:
      matrix:
        build-mode:
          - debug
          - profile
          - release
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Install dependencies
        run: |
          cd flutter
          flutter pub get
          
      - name: Setup environment configuration
        run: |
          cd flutter
          case "${{ needs.determine-environment.outputs.environment }}" in
            "production")
              cp lib/env/env.prod.dart lib/env/env.dart
              ;;
            "staging")
              cp lib/env/env.staging.dart lib/env/env.dart
              ;;
            "release-candidate")
              cp lib/env/env.staging.dart lib/env/env.dart
              ;;
            *)
              cp lib/env/env.dev.dart lib/env/env.dart
              ;;
          esac
          
      - name: Setup iOS signing (Release only)
        if: matrix.build-mode == 'release' && needs.determine-environment.outputs.environment != 'development'
        run: |
          cd flutter/ios
          
          # Create keychain
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -l build.keychain
          
          # Install certificate
          echo "${{ secrets.IOS_CERTIFICATE_BASE64 }}" | base64 -d > certificate.p12
          security import certificate.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          
          # Install provisioning profile
          echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 -d > profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          
      - name: Build iOS
        run: |
          cd flutter
          
          # Set flavor based on environment
          FLAVOR=""
          case "${{ needs.determine-environment.outputs.environment }}" in
            "production")
              FLAVOR="--flavor prod"
              ;;
            "staging")
              FLAVOR="--flavor staging"
              ;;
            "release-candidate")
              FLAVOR="--flavor staging"
              ;;
            *)
              FLAVOR="--flavor dev"
              ;;
          esac
          
          if [[ "${{ matrix.build-mode }}" == "release" && "${{ needs.determine-environment.outputs.environment }}" != "development" ]]; then
            flutter build ios --${{ matrix.build-mode }} $FLAVOR
          else
            flutter build ios --${{ matrix.build-mode }} --no-codesign $FLAVOR
          fi
          
      - name: Archive iOS App (Release only)
        if: matrix.build-mode == 'release' && needs.determine-environment.outputs.environment != 'development'
        run: |
          cd flutter/ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath build/Runner.xcarchive \
            archive
            
      - name: Upload iOS build
        uses: actions/upload-artifact@v3
        with:
          name: ios-build-${{ matrix.build-mode }}-${{ needs.determine-environment.outputs.environment }}
          path: |
            flutter/build/ios/
            flutter/ios/build/Runner.xcarchive/

  test-builds:
    name: Test Builds
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [determine-environment, build-android]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Install dependencies
        run: |
          cd flutter
          flutter pub get
          
      - name: Download Android Debug APK
        uses: actions/download-artifact@v3
        with:
          name: android-apk-debug-${{ needs.determine-environment.outputs.environment }}
          path: ./builds/android/debug/
          
      - name: Validate APK
        run: |
          cd builds/android/debug
          
          # Check if APK exists
          if [ ! -f *.apk ]; then
            echo "Error: APK not found"
            exit 1
          fi
          
          # Check APK size (should be reasonable)
          APK_SIZE=$(stat -c%s *.apk)
          if [ $APK_SIZE -lt 10000000 ]; then  # 10MB
            echo "Warning: APK size is unusually small: $APK_SIZE bytes"
          fi
          
          if [ $APK_SIZE -gt 100000000 ]; then  # 100MB
            echo "Warning: APK size is unusually large: $APK_SIZE bytes"
          fi
          
          echo "APK validation passed. Size: $APK_SIZE bytes"
          
      - name: APK Analysis
        run: |
          cd builds/android/debug
          APK_FILE=$(find . -name "*.apk" | head -1)
          
          if [ -f "$APK_FILE" ]; then
            echo "APK Analysis Results:"
            echo "===================="
            echo "File: $APK_FILE"
            echo "Size: $(stat -c%s "$APK_FILE") bytes"
            echo "SHA256: $(sha256sum "$APK_FILE")"
            
            # Additional analysis could be added here
            # e.g., using aapt to analyze the APK structure
          fi

  deploy-to-firebase:
    name: Deploy to Firebase App Distribution
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [determine-environment, build-android, test-builds]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download Android Debug APK
        uses: actions/download-artifact@v3
        with:
          name: android-apk-debug-${{ needs.determine-environment.outputs.environment }}
          path: ./builds/android/debug/
          
      - name: Deploy to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: ${{ needs.determine-environment.outputs.environment == 'production' && 'production-testers' || 'internal-testers' }}
          file: ./builds/android/debug/app-debug.apk
          releaseNotes: |
            Environment: ${{ needs.determine-environment.outputs.environment }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Build: ${{ github.run_number }}
            
            Changes in this build:
            ${{ github.event.head_commit.message }}

  nightly-build-report:
    name: Nightly Build Report
    runs-on: ubuntu-latest
    needs: [determine-environment, build-android, build-ios, test-builds]
    if: github.event_name == 'schedule' && always()
    
    steps:
      - name: Generate build report
        run: |
          cat > build_report.md << EOF
          # Nightly Build Report - $(date +"%Y-%m-%d")
          
          ## Build Summary
          - **Environment:** ${{ needs.determine-environment.outputs.environment }}
          - **Commit:** ${{ github.sha }}
          - **Branch:** ${{ github.ref_name }}
          - **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Build Results
          - **Android Build:** ${{ needs.build-android.result }}
          - **iOS Build:** ${{ needs.build-ios.result }}
          - **Build Tests:** ${{ needs.test-builds.result }}
          
          ## Build Artifacts
          - Android APK (Debug): Available
          - Android APK (Profile): Available
          - Android APK (Release): Available
          - Android AAB (Release): Available
          - iOS Build (Debug): Available
          - iOS Build (Profile): Available
          - iOS Build (Release): Available
          
          ## Next Steps
          - Review build results and artifacts
          - Test deployed builds on Firebase App Distribution
          - Address any build failures or warnings
          
          ---
          *Generated by GitHub Actions*
          EOF
          
      - name: Upload build report
        uses: actions/upload-artifact@v3
        with:
          name: nightly-build-report
          path: build_report.md
          
      - name: Send build report to Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: '${{ (needs.build-android.result == 'success' && needs.build-ios.result == 'success') && 'good' || 'danger' }}',
                blocks: [
                  {
                    type: 'header',
                    text: {
                      type: 'plain_text',
                      text: '🌙 Nightly Build Report'
                    }
                  },
                  {
                    type: 'section',
                    fields: [
                      {
                        type: 'mrkdwn',
                        text: `*Date:* $(date +"%Y-%m-%d")`
                      },
                      {
                        type: 'mrkdwn',
                        text: `*Environment:* ${{ needs.determine-environment.outputs.environment }}`
                      },
                      {
                        type: 'mrkdwn',
                        text: `*Android:* ${{ needs.build-android.result == 'success' && '✅' || '❌' }}`
                      },
                      {
                        type: 'mrkdwn',
                        text: `*iOS:* ${{ needs.build-ios.result == 'success' && '✅' || '❌' }}`
                      }
                    ]
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}