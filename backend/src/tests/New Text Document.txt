// /backend/src/tests/setup.ts
import { jest } from '@jest/globals';

// Mock console methods to reduce noise during testing
global.console = {
  ...console,
  log: jest.fn(),
  error: jest.fn(),
  warn: jest.fn(),
  info: jest.fn(),
  debug: jest.fn(),
};

// Mock setInterval and clearInterval to prevent hanging
const originalSetInterval = global.setInterval;
const originalClearInterval = global.clearInterval;

const intervals: NodeJS.Timeout[] = [];

global.setInterval = ((callback: Function, delay?: number) => {
  const id = originalSetInterval(callback, delay);
  intervals.push(id);
  return id;
}) as any;

global.clearInterval = (id: NodeJS.Timeout) => {
  const index = intervals.indexOf(id);
  if (index > -1) {
    intervals.splice(index, 1);
  }
  originalClearInterval(id);
};

// Clean up intervals after each test
afterEach(() => {
  intervals.forEach(id => originalClearInterval(id));
  intervals.length = 0;
});

// Increase timeout for async operations
jest.setTimeout(10000);

// Mock database connection globally
jest.mock('../models/db', () => ({
  pool: {
    query: jest.fn().mockRejectedValue(new Error('Database not available in tests')),
    connect: jest.fn().mockRejectedValue(new Error('Database not available in tests')),
    end: jest.fn()
  }
}));

// Mock the config to prevent real environment dependencies
jest.mock('../config', () => ({
  config: {
    jwtSecret: 'test-jwt-secret-key-for-testing-only',
    port: 3000,
    nodeEnv: 'test',
    database: {
      host: 'localhost',
      port: 5432,
      name: 'test_db',
      user: 'test_user',
      password: 'test_password'
    }
  }
}));