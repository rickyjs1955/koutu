// /shared/src/schemas/garment.ts
import { z } from 'zod';

// Base schema for a garment item
export const GarmentSchema = z.object({
  id: z.string().uuid().optional(), // Optional for creation, required after DB insertion
  original_image_id: z.string().uuid(),
  file_path: z.string(),
  mask_path: z.string(),
  metadata: z.object({
    type: z.enum(['shirt', 'pants', 'dress', 'jacket', 'skirt', 'other']),
    color: z.string(),
    pattern: z.enum(['solid', 'striped', 'plaid', 'floral', 'geometric', 'other']).optional(),
    season: z.enum(['spring', 'summer', 'fall', 'winter', 'all']).optional(),
    brand: z.string().optional(),
    tags: z.array(z.string()).optional(),
  }),
  created_at: z.date().optional(), // Generated by DB
  updated_at: z.date().optional(), // Generated by DB
  data_version: z.number().int().positive().optional(), // Generated by DB
});

// Schema for creating a new garment
// Note: We're making file_path and mask_path optional for frontend forms
// since these will be generated by the backend after processing the mask
export const CreateGarmentSchema = z.object({
  original_image_id: z.string().uuid(),
  file_path: z.string().optional(), // Optional in form, will be set by server
  mask_path: z.string().optional(), // Optional in form, will be set by server
  metadata: GarmentSchema.shape.metadata,
  mask_data: z.object({
    width: z.number().int().positive(),
    height: z.number().int().positive(),
    data: z.array(z.number())
  })
});

// Schema for updating garment metadata
export const UpdateGarmentMetadataSchema = z.object({
  metadata: GarmentSchema.shape.metadata,
});

// Schema for garment response
export const GarmentResponseSchema = GarmentSchema;

// Derived TypeScript types
export type Garment = z.infer<typeof GarmentSchema>;
export type CreateGarmentInput = z.infer<typeof CreateGarmentSchema>;
export type UpdateGarmentMetadata = z.infer<typeof UpdateGarmentMetadataSchema>;
export type GarmentResponse = z.infer<typeof GarmentResponseSchema>;